import { __decorate, __param } from "tslib";
import { Inject, Injectable, InjectionToken } from '@angular/core';
import { GoogleApiConfig } from './config/GoogleApiConfig';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export let NG_GAPI_CONFIG = new InjectionToken('ng-gapi.config');
let GoogleApiService = class GoogleApiService {
    constructor(config) {
        this.gapiUrl = 'https://apis.google.com/js/api.js';
        this.observers = [];
        this.config = new GoogleApiConfig(config);
        this.loadGapi().subscribe();
    }
    onLoad() {
        return this.loadGapi();
    }
    getConfig() {
        return this.config;
    }
    loadGapi() {
        return new Observable((observer) => {
            if (this.gapiLoaded) {
                observer.next(true);
                observer.complete();
            }
            else if (!this.node) {
                /**
                 * script element has not yet been added to document
                 */
                this.node = document.createElement('script');
                this.node.async = true;
                this.node.src = this.gapiUrl;
                this.node.type = 'text/javascript';
                this.node.onload = () => {
                    this.gapiLoaded = true;
                    while (this.observers.length) {
                        const observer = this.observers.shift();
                        observer.next(true);
                        observer.complete();
                    }
                    this.node = undefined;
                };
                this.node.onerror = () => {
                    this.node = undefined;
                };
                document.getElementsByTagName('head')[0].appendChild(this.node);
            }
            else {
                /**
                 * script is in the middle of being loaded
                 */
                this.observers.push(observer);
            }
        });
    }
};
GoogleApiService.ɵfac = function GoogleApiService_Factory(t) { return new (t || GoogleApiService)(ɵngcc0.ɵɵinject(NG_GAPI_CONFIG)); };
GoogleApiService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GoogleApiService, factory: function (t) { return GoogleApiService.ɵfac(t); } });
GoogleApiService = __decorate([ __param(0, Inject(NG_GAPI_CONFIG))
], GoogleApiService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleApiService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NG_GAPI_CONFIG]
            }] }]; }, null); })();
export { GoogleApiService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR29vZ2xlQXBpU2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0dvb2dsZUFwaVNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQUMsZUFBZSxFQUFxQixNQUFNLDBCQUEwQixDQUFDO0FBQzdFLE9BQU8sRUFBQyxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7O0FBRTFDLE1BQU0sQ0FBQyxJQUFJLGNBQWMsR0FDdkIsSUFBSSxjQUFjLENBQXFCLGdCQUFnQixDQUFDLENBQUM7QUFHM0QsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7QUFDN0IsSUFNRSxZQUFvQyxNQUEwQjtBQUNoRSxRQVBtQixZQUFPLEdBQVcsbUNBQW1DLENBQUM7QUFDekUsUUFHVSxjQUFTLEdBQXdCLEVBQUUsQ0FBQztBQUM5QyxRQUVJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsUUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDaEMsSUFBRSxDQUFDO0FBQ0gsSUFDUyxNQUFNO0FBQUssUUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDM0IsSUFBRSxDQUFDO0FBQ0gsSUFDUyxTQUFTO0FBQUssUUFDbkIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBQ1UsUUFBUTtBQUFLLFFBQ25CLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUEyQixFQUFFLEVBQUU7QUFDMUQsWUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDM0IsZ0JBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixnQkFBUSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7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LEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUF0REEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUEEsQUFBQSxBQXNEQSxBQXREQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7R29vZ2xlQXBpQ29uZmlnLCBOZ0dhcGlDbGllbnRDb25maWd9IGZyb20gJy4vY29uZmlnL0dvb2dsZUFwaUNvbmZpZyc7XG5pbXBvcnQge09ic2VydmFibGUsIE9ic2VydmVyfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGxldCBOR19HQVBJX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48TmdHYXBpQ2xpZW50Q29uZmlnPiA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxOZ0dhcGlDbGllbnRDb25maWc+KCduZy1nYXBpLmNvbmZpZycpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR29vZ2xlQXBpU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZ2FwaVVybDogc3RyaW5nID0gJ2h0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL2FwaS5qcyc7XG4gIHByaXZhdGUgY29uZmlnOiBHb29nbGVBcGlDb25maWc7XG4gIHByaXZhdGUgZ2FwaUxvYWRlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBub2RlOiBIVE1MU2NyaXB0RWxlbWVudDtcbiAgcHJpdmF0ZSBvYnNlcnZlcnM6IE9ic2VydmVyPGJvb2xlYW4+W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HX0dBUElfQ09ORklHKSBjb25maWc6IE5nR2FwaUNsaWVudENvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gbmV3IEdvb2dsZUFwaUNvbmZpZyhjb25maWcpO1xuICAgIHRoaXMubG9hZEdhcGkoKS5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkxvYWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMubG9hZEdhcGkoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb25maWcoKTogR29vZ2xlQXBpQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICBwcml2YXRlIGxvYWRHYXBpKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPGJvb2xlYW4+KSA9PiB7XG4gICAgICBpZiAodGhpcy5nYXBpTG9hZGVkKSB7XG4gICAgICAgIG9ic2VydmVyLm5leHQodHJ1ZSk7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLm5vZGUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNjcmlwdCBlbGVtZW50IGhhcyBub3QgeWV0IGJlZW4gYWRkZWQgdG8gZG9jdW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICB0aGlzLm5vZGUuYXN5bmMgPSB0cnVlO1xuICAgICAgICB0aGlzLm5vZGUuc3JjID0gdGhpcy5nYXBpVXJsO1xuICAgICAgICB0aGlzLm5vZGUudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICB0aGlzLm5vZGUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZ2FwaUxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgd2hpbGUgKHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVycy5zaGlmdCgpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ub2RlLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5ub2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY3JpcHQgaXMgaW4gdGhlIG1pZGRsZSBvZiBiZWluZyBsb2FkZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=