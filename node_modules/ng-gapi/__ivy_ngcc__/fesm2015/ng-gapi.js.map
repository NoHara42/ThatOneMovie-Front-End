{"version":3,"file":"ng-gapi.js","sources":["../../src/config/GoogleApiConfig.ts","../../src/GoogleApiService.ts","../../src/GoogleAuthService.ts","../../src/GoogleApiModule.ts","../../src/ng-gapi.ts"],"names":[],"mappings":"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","sourcesContent":["import ClientConfig = gapi.auth2.ClientConfig;\n\nexport interface NgGapiClientConfig extends ClientConfig {\n  discoveryDocs: string[];\n}\n\nexport class GoogleApiConfig {\n  protected clientConfig: NgGapiClientConfig;\n\n  constructor(clientConfig: NgGapiClientConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  public getClientConfig(): NgGapiClientConfig {\n    return this.clientConfig;\n  }\n}\n","import {Inject, Injectable, InjectionToken} from '@angular/core';\nimport {GoogleApiConfig, NgGapiClientConfig} from './config/GoogleApiConfig';\nimport {Observable, Observer} from 'rxjs';\n\nexport let NG_GAPI_CONFIG: InjectionToken<NgGapiClientConfig> =\n  new InjectionToken<NgGapiClientConfig>('ng-gapi.config');\n\n@Injectable()\nexport class GoogleApiService {\n  private readonly gapiUrl: string = 'https://apis.google.com/js/api.js';\n  private config: GoogleApiConfig;\n  private gapiLoaded: boolean;\n  private node: HTMLScriptElement;\n  private observers: Observer<boolean>[] = [];\n\n  constructor(@Inject(NG_GAPI_CONFIG) config: NgGapiClientConfig) {\n    this.config = new GoogleApiConfig(config);\n    this.loadGapi().subscribe();\n  }\n\n  public onLoad(): Observable<boolean> {\n    return this.loadGapi();\n  }\n\n  public getConfig(): GoogleApiConfig {\n    return this.config;\n  }\n\n  private loadGapi(): Observable<boolean> {\n    return new Observable((observer: Observer<boolean>) => {\n      if (this.gapiLoaded) {\n        observer.next(true);\n        observer.complete();\n      } else if (!this.node) {\n        /**\n         * script element has not yet been added to document\n         */\n        this.node = document.createElement('script');\n        this.node.async = true;\n        this.node.src = this.gapiUrl;\n        this.node.type = 'text/javascript';\n        this.node.onload = () => {\n          this.gapiLoaded = true;\n          while (this.observers.length) {\n            const observer = this.observers.shift();\n            observer.next(true);\n            observer.complete();\n          }\n          this.node = undefined;\n        };\n        this.node.onerror = () => {\n          this.node = undefined;\n        }\n        document.getElementsByTagName('head')[0].appendChild(this.node);\n      } else {\n        /**\n         * script is in the middle of being loaded\n         */\n        this.observers.push(observer);\n      }\n    });\n  }\n}\n","import {Injectable, Inject} from '@angular/core';\nimport {GoogleApiService} from './GoogleApiService';\nimport GoogleAuth = gapi.auth2.GoogleAuth;\nimport {Observable, Observer, of} from 'rxjs';\nimport {mergeMap} from 'rxjs/operators';\n\n@Injectable()\nexport class GoogleAuthService {\n  private GoogleAuth: GoogleAuth = undefined;\n\n  constructor(@Inject(GoogleApiService) private googleApi: GoogleApiService) {\n    this.googleApi.onLoad().subscribe(() => {\n      this.loadGapiAuth().subscribe();\n    });\n  }\n\n  public getAuth(newInstance = false): Observable<GoogleAuth> {\n    if (!this.GoogleAuth || newInstance) {\n      return this.googleApi.onLoad()\n        .pipe(mergeMap(() => this.loadGapiAuth()));\n    }\n    return of(this.GoogleAuth);\n  }\n\n  private loadGapiAuth(): Observable<GoogleAuth> {\n    return new Observable((observer: Observer<GoogleAuth>) => {\n      gapi.load('auth2', () => {\n        gapi.auth2.init(this.googleApi.getConfig().getClientConfig()).then((auth: GoogleAuth) => {\n          this.GoogleAuth = auth;\n          observer.next(auth);\n          observer.complete();\n        }).catch((err: any) => observer.error(err));\n      });\n    });\n  }\n}\n","import {ModuleWithProviders, NgModule, Provider} from '@angular/core';\nimport {GoogleAuthService} from './GoogleAuthService';\nimport {GoogleApiService} from './GoogleApiService';\n\n@NgModule()\nexport class GoogleApiModule {\n  static forRoot(gapiConfigProvider: Provider): ModuleWithProviders<GoogleApiModule> {\n    return {\n      ngModule: GoogleApiModule,\n      providers: [\n        gapiConfigProvider,\n        GoogleAuthService,\n        GoogleApiService\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}